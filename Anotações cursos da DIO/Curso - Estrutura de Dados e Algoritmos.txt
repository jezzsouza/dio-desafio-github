Curso - Estrutura de Dados e Algoritmos

Estrutura de dados é uma estrutura organizada de dados na memória de um computador ou em qualquer dispositivo de armazenamento, de forma que os dados possam ser utilizados de forma correta.

Algoritmo é um conjunto de instruções estruturadas e ordenadas, seu objetivo é realizar uma tarefa ou operação específica.
Os algoritmos são utilizados para manipular dados nas estruturas de várias formas, como por exemplo: inserir, excluir, procurar e ordenar dados. 

Principais estruturas de dados utilizadas:

1. Vetores e Matrizes;
2. Registro;
3. Lista;
4. Pilha;
5. Fila;
6. Árvore;
7. Tabela Hash;
8. Grafos.

Vetor

Vetores e Matrizes ou Arrays são estruturas de dados simples que podem auxiliar quando há muitas variáveis do mesmo tipo em um algoritmo.

Vetor ou array uni-dimensional é uma variável que armazena várias variáveis do mesmo tipo.
O vetor é uma estrutura de dados indexada, que pode armazenar uma determinada quantidade de valores do mesmo tipo.
Exemplo de vetor:
inteiro numeros [] = {39,45,54,55}

...exibe uma posição...
		
escreva(numeros[0]) 

para (inteiro posicao = 0

....exibe todas as posições...

para (inteiro posicao = 0; posicao <=3; posicao++){
		    escreva(numeros[posicao], " ")
}  

Matriz

Matriz ou array multi-dimensional é um ventor de vetores.
Uma matriz é um vetor que possui duas ou mais dimensões.
Toda matriz será multiplicada, terá dois for.

Registro

Um Registro é uma estrutura que fornece um formato especializado para armazenar informações em memória. O recurso de Registro nos permite armazenar mais de uma categoria de dado.
Toda estrutura de registro tem um nome (ex:livro), e seus campos podem ser acessados por meio do uso do operador ponto(.). Por exemplo, para acessar o preço de um livro, poderíamos utilizar a seguinte declaração:
           livro.preco;

Listas

Estrutura de dados do tipo lista, armazena dados de um determinado tipo em uma ordem específica.
A diferença entre listas e arrays é a de que as listas possuem tamanho ajustável, quando arrys possuem tamanho fixo.
Existem duas categorias de listas:

Ligadas - Na estrutura do tipo lista existem os nós onde cada um dos nós conhece o valor que está sendo armazenado em seu interior, além de conhecer o elemento posterior a ele: por isso ela é chamada "lista ligada", pois os nós são armazenados com essa indicação de qual é o próximo nó.

Duplamente Ligadas - constituem uma variação das listas ligadas.
A grande diferença das listas duplamente ligadas para as listas ligadas é que elas são bidirecionais. Não conseguimos "andar para trás" em listas ligadas, pois os nós de uma lista ligada sabem somente quem é o próximo elemento. Nas listas duplamente ligadas, os nós sabem quem é o próximo elemento e também quem é o elemento anterior, permitindo a navegação reversa.

Pilhas (Stack)

Uma Pilha é uma estrutura de dados que serve como uma coleção de elementos, e permite o acesso a somente um item de dados armazenado.
O acesso aos itens é restrito - somente um item pode ser lido ou removido por vez.

Tipos de pilhas:

LIFO ou UEPS - A estrutura do tipo PILHA LIFO (Last in First Out) ou UEPS (Último que Entra Primeiro que Sai), apresenta o seguinte critério: o primeiro elemento a ser retirado é o último que tiver sido inserido.

FIFO ou PEPS - A estrutura do tipo PILHA FIFO (First in First Out) ou PEPS (Primeiro que Entra Primeiro que Sai), apresenta o seguinte critério: o primeiro elemento a ser retirado é o primeiro que tiver sido inserido.

Filas

A estrutura do tipo Filas admite remoção de elementos e inserção de novos sujeita à seguinte regra de operação: o elemento removido é o que está na estrutura há mais tempo ou seja, o primeiro objeto inserido na fila é também o primeiro a ser removido seguindo o conceito FIFO.

Árvore

É uma estrutura de dados que organiza seus elementos de forma hierárquica, onde existe um elemento que fica no topo da árvore, chamado raiz e existem os elementos subordinados a ele, chamados nós ou folhas.

Tabela Hash

Uma tabela hash, de dispersão ou espalhamento é uma estrutura de dados especial, que associa chaves de pesquisa a valores.
Uma tabela hash é uma generalização da ideia de array, porém utiliza uma função denominada Hashing para espalhar os elementos, fazendo com que os mesmos fiquem de forma não ordenada dentro do "array" que define a tabela.

Porque espalhar?
A tabela hash permite a associação de "valores" a "chaves".

Valores: é a posição ou índice onde o elemento se encontra.

Chave: parte da informação que compõe o elemento a ser manipulado.

Espalhar facilita a busca na estrutura de dados, pois a partir de uma chave podemos acessar de forma rápida uma posição do "array".

Grafo

Grafos são estruturas que permitem programar a relação entre objetos.

Os objetos são vértices ou "nós" do grafo.

Os relacionamentos são arestas.